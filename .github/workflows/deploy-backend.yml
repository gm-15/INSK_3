# 워크플로우 이름
name: Deploy Backend to AWS ECR

# 1. 워크플로우 트리거 (Trigger)
# 'main' 브랜치에 'push' 이벤트가 발생할 때만 이 워크플로우를 실행합니다.
on:
  push:
    branches: [ "main" ]

# 2. 환경 변수 설정
# 워크플로우 전체에서 사용할 변수를 정의합니다.
env:
  # ECR 리포지토리를 생성한 AWS 리전 (GitHub Secret에서 가져옴)
  AWS_REGION: ${{ secrets.AWS_REGION }}

  # ECR 리포지토리 이름 (ECR 생성 시 사용한 이름)
  ECR_REPOSITORY: insk-backend

# 3. 실행할 작업 (Jobs) 정의
jobs:
  # 'build-and-push'라는 이름의 작업 정의
  build-and-push:
    runs-on: ubuntu-latest # 이 작업은 Ubuntu 최신 버전 환경에서 실행됩니다.

    # 작업 단계 (Steps)
    steps:
      # 1단계: 소스 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2단계: AWS 자격 증명 설정 (GitHub Secrets 사용)
      # GitHub Actions가 AWS에 로그인하도록 합니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 3단계: Amazon ECR 로그인
      # AWS ECR에 Docker 로그인을 수행합니다.
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 4단계: Docker 이미지 빌드 및 태그 지정
      # 'login-ecr' 단계에서 얻은 ECR 주소와 'latest' 태그를 사용하여 Docker 이미지를 빌드합니다.
      - name: Build and tag Docker image
        id: build-image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest -f backend/Dockerfile .

      # 5단계: Docker 이미지를 ECR로 푸시
      # 방금 빌드한 이미지를 AWS ECR 리포지토리로 업로드합니다.
      - name: Push Docker image to Amazon ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest